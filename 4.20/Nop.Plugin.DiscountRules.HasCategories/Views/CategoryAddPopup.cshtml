@model RequirementModel.AddCategoryModel

@{
    Layout = "_AdminPopupLayout";

    //page title
    ViewBag.Title = T("Plugins.DiscountRules.HasCategories.Choose").Text;

    bool showOnlySelectedItems = Context.Request.Query["selectedView"] == "1";
}

<form asp-controller="DiscountRulesHasCategories" asp-action="Configure" method="post">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Plugins.DiscountRules.HasCategories.Choose")
        </h1>
        <div class="pull-right">
            <a href="javascript:void(0)" id="js-selected-item-count"
               data-text-show-selected="@T("Plugins.DiscountRules.HasCategories.Show.Selected")"
               data-text-hide-selected="@T("Plugins.DiscountRules.HasCategories.Hide.Selected")"
               data-text-not-selected="@T("Plugins.DiscountRules.HasCategories.Not.Selected")">
                <i class="fa fa-angle-left @(showOnlySelectedItems ? "" : "hidden")"></i>
                <span></span>
            </a>
        </div>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search panel-popup @(showOnlySelectedItems ? "hidden" : "")" id="js-search-panel">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <div class="col-sm-5">
                                        <nop-label asp-for="SearchCategoryName" />
                                    </div>
                                    <div class="col-sm-7">
                                        <nop-editor asp-for="SearchCategoryName" />
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group" @(Model.AvailableStores.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                        <div class="col-sm-5">
                                            <nop-label asp-for="SearchStoreId" />
                                        </div>
                                        <div class="col-sm-7">
                                            <nop-select asp-for="SearchStoreId" asp-items="Model.AvailableStores" />
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-sm-8 col-sm-offset-4">
                                        <button type="button" id="js-search-btn" class="btn btn-primary btn-search">@T("Admin.Common.Search")</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        @await Html.PartialAsync("Table", new DataTablesModel
                        {
                            Name = "js-grid",
                            UrlRead = showOnlySelectedItems ?
                                new DataUrl("CategorySelectedPopupList", "DiscountRulesHasCategories",
                                    new RouteValueDictionary { ["selectedItemIds"] = Context.Request.Query["selectedItemIds"] }) :
                                new DataUrl("CategoryAddPopupList", "DiscountRulesHasCategories", null),
                            SearchButtonId = "js-search-btn",
                            Length = Model.PageSize,
                            LengthMenu = Model.AvailablePageSizes,
                            Filters = new List<FilterParameter>
                            {
                                new FilterParameter(nameof(Model.SearchCategoryName)),
                                new FilterParameter(nameof(Model.SearchStoreId)),
                            },
                            ColumnCollection = new List<ColumnProperty>
                            {
                                new ColumnProperty(nameof(CategoryModel.Id))
                                {
                                    IsMasterCheckBox = true,
                                    Render = new RenderCheckBox(nameof(AddCategoryToDiscountModel.SelectedCategoryIds)),
                                    ClassName =  $"{NopColumnClassDefaults.CenterAll} js-checkbox",
                                    Width = "50",
                                },
                                new ColumnProperty(nameof(CategoryModel.Breadcrumb))
                                {
                                    Title = T("Admin.Catalog.Categories.Fields.Name").Text
                                },
                                new ColumnProperty(nameof(CategoryModel.Published))
                                {
                                    Title = T("Admin.Catalog.Categories.Fields.Published").Text,
                                    Width = "100",
                                    ClassName = NopColumnClassDefaults.CenterAll,
                                    Render = new RenderBoolean()
                                }
                            }
                        })
                    </div>
                    <div class="panel-footer">
                        <button type="button" name="save" id="js-save-btn" class="btn bg-blue">
                            <i class="fa fa-floppy-o"></i>
                            @T("Admin.Common.Select")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<script type="text/javascript">

    (function (win, $) {

        var $doc = $(win.document);

        var selectorSearchItemNameInput = '#@Html.IdFor(model => model.SearchCategoryName)';
        var selectorGridCheckbox = '.js-checkbox input:not(#mastercheckbox)';

        var qsParamItemIds = '@(Context.Request.Query["selectedItemIds"])';
        var qsParamItemIdsInput = '@(Context.Request.Query["itemIdsInput"])';
        var qsParamRefreshBtnId = '@(Context.Request.Query["refreshBtnId"])';
        var showOnlySelectedItems = !!parseInt('@(Context.Request.Query["selectedView"])');

        var urlSelectedPopupList = '@Url.Action("CategorySelectedPopupList", "DiscountRulesHasCategories")';
        var urlSelectPopupList = '@Url.Action("CategoryAddPopupList", "DiscountRulesHasCategories")';

        // Cache current item ids
        var selectedItemIdsCache = getIdArr(qsParamItemIds);

        $doc.ready(function () {

            var $searchPanel = $('#js-search-panel');
            var $searchBtn = $('#js-search-btn');
            var $itemCount = $('#js-selected-item-count');
            var $grid = $('#js-grid');

            // After dataTable is drawn, update checkbox states correctly
            $grid.on('draw.dt', onDraw);

            // Toggle grid view on "item count" click
            $itemCount.click(toggleView);

            $searchBtn.off('click').on('click', function() {
                $grid.DataTable().ajax.reload();
                return false;
            });

            // Fire search after pressing enter
            $(selectorSearchItemNameInput).keydown(function(event) {
                if (event.keyCode == 13) {
                    $searchBtn.click();
                    return false;
                }
            });

            // Keep track of selected item ids
            $doc.on('change', selectorGridCheckbox, function () {
                var index = selectedItemIdsCache.indexOf(this.value);
                if (this.checked) {
                    if (index < 0) {
                        selectedItemIdsCache.push(this.value);
                    }
                }
                else {
                    if (index >= 0) {
                        selectedItemIdsCache.splice(index, 1);
                    }
                }

                // Update selected item count
                updateItemCount($itemCount, selectedItemIdsCache.length);
            });

            // Save selected items and close popup
            $doc.on('click', '#js-save-btn', function () {
                try {
                    var parentDoc = win.opener.document;
                    var $itemIdsInput = $(parentDoc.getElementById(qsParamItemIdsInput));
                    var $refreshBtn = $(parentDoc.getElementById(qsParamRefreshBtnId));
                    $itemIdsInput.val(selectedItemIdsCache.join(', '));
                    $refreshBtn.click();
                }
                catch (e){}
                win.close();
            });

            function toggleView() {
                showOnlySelectedItems = !showOnlySelectedItems;

                if (showOnlySelectedItems) {
                    var itemCount = parseInt($(this).data('count'));
                    if (itemCount === 0) {
                        return false;
                    }
                }
                $grid.DataTable().ajax.url(getGridUrl()).load();
            }

            function onDraw () {
                initializeCheckboxes($grid);

                // Update selected item count
                updateItemCount($itemCount, selectedItemIdsCache.length);

                if (showOnlySelectedItems) {
                    $searchPanel.addClass('hidden');
                    $itemCount.find('i').removeClass('hidden');
                    $('#js-grid_paginate, #js-grid_info, .data-tables-refresh').addClass('hidden');
                }
                else {
                    $searchPanel.removeClass('hidden');
                    $itemCount.find('i').addClass('hidden');
                    $('#js-grid_paginate, #js-grid_info, .data-tables-refresh').removeClass('hidden');
                }
            }
        });

        function getIdArr(str) {
            return str ? str.replace(/\s/g, '').split(',') : [];
        }

        function initializeCheckboxes($grid) {
            var $checkboxes = $grid.find(selectorGridCheckbox);
            $checkboxes.each(function () {
                this.checked = selectedItemIdsCache.indexOf(this.value) > -1;
            }).change();
        }

        function updateItemCount($itemCount, itemCount) {
            var cursor = null;
            var color = null;
            var text = null;
            var elItemCount = $itemCount[0];
            if (itemCount === 0) {
                text = $itemCount.data('text-not-selected');
                if (showOnlySelectedItems === false) {
                    cursor = 'default';
                    color = '#333';
                }
            }
            else {
                text = $itemCount
                    .data('text-' + (showOnlySelectedItems ? 'hide' : 'show') + '-selected')
                    .replace('{0}', itemCount);
            }
            elItemCount.style.cursor = cursor;
            elItemCount.style.color = color;
            $itemCount.data('count', itemCount);
            $itemCount.find('span').text(text);
        }

        function getGridUrl() {
            return showOnlySelectedItems ?
                (urlSelectedPopupList + '?selectedItemIds=' + selectedItemIdsCache.join(',')) : urlSelectPopupList;
        }

    })(this, this.jQuery);

</script>